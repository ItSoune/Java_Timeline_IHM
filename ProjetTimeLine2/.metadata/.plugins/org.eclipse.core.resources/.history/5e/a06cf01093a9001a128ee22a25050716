package Controleur;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.Serializable;

import javax.swing.*;

import modele.*;
import vue.*;

/**
 * La classe controleur permet de faire la liaison entre le modele et la vue.
 * 
 * @author BOUCHDI Yassine
 *
 */
public class Controleur implements ActionListener, Serializable {
	Frise chFrise;
	PanelCreation chPanelCreation;
	PanelEvt chPanelEvt;	
	
	/**
	 * Le constructeur prend en paramètre les diffèrentes classes du modèle et de la
	 * vue pour les mettre en relation.
	 * 
	 * @param parAgenda Le controleur prend en paramètre l'agenda qui contient les évenements.
	 * @param parPanelFormulaire Le controleur prend en paramètre le PanelFormulaire qui permet l'ajout des événements.
	 * @param parPanelCalendrier Le controleur prend en paramètre le PanelCalendrier qui contient le calendrier du mois.
	 * @param parPanelAffichage Le controleur prend en paramètre PanelAffichage qui contient ModelTable.
	 */
	public Controleur(Frise parFrise, PanelCreation parPanelCreation, PanelEvt parPanelEvt) {
		chFrise = parFrise;
		chPanelFormulaire = parPanelFormulaire;
		chPanelCalendrier = parPanelCalendrier;
		chPanelAffichage = parPanelAffichage;
		chPanelFormulaire.enregistreEcouteur(this);
		chPanelCalendrier.enregistreEcouteur(this);
	}

	/**
	 * Le controleur mis à l'écoute des actions sur les boutons de calendrier
	 * modifie le formulaire de PanelFormulaire et la JTable de PanelAffichage et
	 * ajoute l'agenda au fichier.
	 */
	public void actionPerformed(ActionEvent parEvt) {
		if (parEvt.getActionCommand().equals("+")) {
			chAgenda.ajoutMap(chPanelFormulaire.getEvenement());
			chPanelAffichage.setModeleTable(chTempdate, chAgenda);
			String currentUser;

			currentUser = Login.getCurrentUsername();

			LectureEcriture a = new LectureEcriture();

			a.ecriture(Login.fichTes, chAgenda);

		} else {
			BoutonDate bout = (BoutonDate) parEvt.getSource();
			if (chBoutemp != bout) {

				if (chBoutemp.getDate().compareTo(chAujourdhui) == 0) {
					chBoutemp.setBackground(new Color(0, 0, 100));
					chBoutemp.setForeground(new Color(255, 255, 255));

				} else if (chBoutemp.getDate().getMois() != bout.getDate().getMois()) {
					chBoutemp.setBackground(new Color(175, 175, 175));
					chBoutemp.setForeground(new Color(100, 100, 100));

				} else if (chBoutemp.getDate().getJourSemaine() == 7 || chBoutemp.getDate().getJourSemaine() == 1) {
					chBoutemp.setBackground(new Color(225, 225, 225));
					chBoutemp.setForeground(new Color(0, 0, 0));

				}

				else {
					chBoutemp.setBackground(new Color(200, 200, 200));
					chBoutemp.setForeground(new Color(0, 0, 0));

				}
			}

			if (parEvt.getSource() == bout) {
				Date date = bout.getDate();
				chTempdate = date;
				chPanelFormulaire.setDate(date);
				chPanelAffichage.setModeleTable(date, chAgenda);
				bout.setBackground(new Color(255, 255, 255));
				bout.setForeground(new Color(0, 0, 100));
				chBoutemp = bout;
			}
		}
	}
}
