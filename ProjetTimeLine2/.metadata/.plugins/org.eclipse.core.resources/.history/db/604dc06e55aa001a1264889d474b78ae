package vue;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;

import Controleur.Controleur;
import modele.*;

public class PanelFrise extends JPanel implements ActionListener {
	
		CardLayout chLayout = new CardLayout();

		public PanelFrise() {
			Frise chFrise = new Frise();
			Evt e1 = new Evt(new Date(5, 3, 2020), " Projet IHM", "Le 1er décembre 1955, lorsque Rosa Parks, une femme noire, est arrêtée pour avoir violé les lois ségrégationnistes de la ville en refusant de céder sa place à un Blanc, il mène le boycott des",3);
			Evt e2 = new Evt(new Date(5, 5, 2020), " Projet BD", "La table est synchronisée avec le conteneur d’étiquettes : lorsque l’utilisateur clique dans la table sur un\r\n" + 
					"événement, celui-ci doit être affiché dans le conteneur. Le conteneur d’étiquettes est synchronisé avec la\r\n" + 
					"table : si l’utilisateur choisit d’avancer dans la chronologie à l’aide des boutons associés au conteneur alors\r\n" + 
					"la barre horizontale de défilement se déplace vers la colonne contenant l’événement affiché.",2);
			Evt e3 = new Evt(new Date(10, 5, 2020), " Projet COO", "À chaque ajout d’événement une sauvegarde sur fichier de la chronologie est réalisée ; à l’ouverture de\r\n" + 
					"l’application l’utilisateur a la possibilité soit de créer une nouvelle frise, soit d’indiquer le nom du fichier qui\r\n" + 
					"contient la frise qu’il veut visualiser ou compléter.",0);


			chFrise.ajoutMap(e1);
			chFrise.ajoutMap(e2);
			chFrise.ajoutMap(e3);



			PanelCreation creation = new PanelCreation();
			PanelEvt evt = new PanelEvt(chFrise);
			Controleur contr = new Controleur(chFrise, creation, evt);
			this.setLayout(chLayout);

			this.add(evt,Data.MENU[1]);
			this.add(creation,Data.MENU[0]);
	
		}
		public void actionPerformed(ActionEvent e) {
			String actionCommand = e.getActionCommand();
			for (int i = 0; i < Data.MENU.length; i++) {
				if (actionCommand.equals(Data.MENU[i])) {
					chLayout.show(this, Data.MENU[i]);

				}
			}
			if (actionCommand.equals(Data.MENU[3])) {
				int saisi = JOptionPane.showConfirmDialog(this, "Êtes-vous sûr de vouloir fermer la fenêtre ?",
						"Dialogue de confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

				switch (saisi) {
				case JOptionPane.CLOSED_OPTION:
					break;
				case JOptionPane.YES_OPTION:
					System.exit(0);
					break;
				case JOptionPane.NO_OPTION:
					break;
				}
			}
		}
		



}
